apiVersion: v1
kind: Service
metadata:
  name: ops-svc
  labels:
    app: ops-svc
spec:
  ports:
    - port: 8080
      name: http
    - port: 8081
      name: websocket
  clusterIP: None
  selector:
    app: yx-ops
    
# ---

# kind: PersistentVolumeClaim
# apiVersion: v1
# metadata:
#   name: ops-pvc
#   annotations:
#     volume.beta.kubernetes.io/storage-class: "managed-nfs-storage"
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 1Gi

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: yx-ops
  labels:
    app: yx-ops
  namespace: default
spec:
  serviceName: ops-svc
  replicas: 1
  selector:
    matchLabels:
      app: yx-ops
  template:
    metadata:
      labels:
        app: yx-ops
    spec:
      containers:
        - name: ops
          image: k8s-repo.io/dms:latest
          imagePullPolicy: Always
          command:
            - "/bin/sh"
            - "docker-run.sh"
          volumeMounts:
            - name: upload
              mountPath: /django-home/uploads
          ports:
            - name: http
              containerPort: 8080
            - name: websocket
              containerPort: 8081
  volumeClaimTemplates:
    - metadata:
        name: upload
        annotations:
          volume.beta.kubernetes.io/storage-class: "managed-nfs-storage"
      spec:
        accessModes:
          - ReadWriteMany
        resources:
          requests:
            storage: 1Gi

---

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ops-ingress
  annotations:
    # use the shared ingress-nginx
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: ops.cs.hnyongxiong.com
    http:
      paths:
      - path: /
        backend:
          serviceName: ops-svc
          servicePort: 8080
      - path: /webssh
          serviceName: ops-svc
          servicePort: 8081
      - path: /webtelnet
          serviceName: ops-svc
          servicePort: 8081